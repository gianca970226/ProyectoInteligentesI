/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectointeligentes;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.ImageIcon;

/**
 *
 * @author JORGE_ALEJANDRO
 */
public class Panel extends javax.swing.JPanel {

    /**
     * Creates new form Panel
     */
    private Mapa mapa;
    private AreaItems areaItems;
    private boolean banderaSeleccionado;
    private Cuadro itemSeleccionado;
    private int xItemSeleccionado;
    private int yItemSeleccionado;
    private Caja cajaMovimiento;
    private Agente agenteMovimiento;

    public Panel() {
        initComponents();
        cajaMovimiento = null;
        agenteMovimiento = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //Verifica si se presiono en alguno de los items del area de items
        if (evt.getX() > areaItems.getAnchoItemsX1()) {
            for (int i = 0; i < areaItems.getItems().size(); i++) {
                if (areaItems.getItems().get(i).getArea().contains(new Point(evt.getX(), evt.getY()))) {
                    banderaSeleccionado = true;
                    itemSeleccionado = (Cuadro) areaItems.getItems().get(i).clone();
                }
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (banderaSeleccionado) {
            xItemSeleccionado = evt.getX();
            yItemSeleccionado = evt.getY();
            repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        //Si existe un componente que esta seleccionado
        if (banderaSeleccionado) {
            //como se alzo el mouse entonces se deselecciona el item
            banderaSeleccionado = false;
            //Se reinician los valores de movimiento del item
            xItemSeleccionado = 0;
            yItemSeleccionado = 0;
            //Se obtiene la posicion en la matriz del item
            int i = evt.getY() / mapa.getAltoCuadro();
            int j = evt.getX() / mapa.getAnchoCuadro();
            //Se obtiene el item
            Cuadro auxItemSeleccionado = itemSeleccionado;
            //Se le setea su area
            Rectangle area = new Rectangle(evt.getX(), evt.getY(), mapa.getAnchoCuadro(), mapa.getAltoCuadro());
            auxItemSeleccionado.setArea(area);
            auxItemSeleccionado.setI(i);
            auxItemSeleccionado.setJ(j);
            //Se almacena en la matriz
            mapa.getMapaM()[i][j] = auxItemSeleccionado;
        }
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (mapa != null && areaItems != null) {
            g.drawImage(new ImageIcon(getClass().getResource("img/fondo.jpg")).getImage(), 0, 0, mapa.getAnchoMapa(), mapa.getAltoMapa(), this);
            g.setColor(Color.decode("#FC4600"));
            g.fillRect(areaItems.getAnchoItemsX1(), 0, (areaItems.getAnchoItemsX2() - mapa.getAnchoMapa()) * 2, mapa.getAltoMapa());
            g.setColor(Color.BLACK);
            g.drawRect(0, 0, mapa.getAnchoMapa(), mapa.getAltoMapa());
            pintarItems(g);

            g.drawRect(0, 0, mapa.getAnchoMapa(), mapa.getAltoMapa());
            pintarMapa(g);
            /*if (cajaMovimiento!=null) {
                g.drawImage(new ImageIcon(getClass().getResource(cajaMovimiento.getRutaImagen())).getImage(), (int) cajaMovimiento.getArea().getX(), (int) cajaMovimiento.getArea().getY(), (int) (mapa.getAnchoCuadro()), mapa.getAltoCuadro(), this);
            }
            if (agenteMovimiento!=null) {
                g.drawImage(new ImageIcon(getClass().getResource(agenteMovimiento.getRutaImagen())).getImage(), (int) agenteMovimiento.getArea().getX(), (int) agenteMovimiento.getArea().getY(), (int) (mapa.getAnchoCuadro()), mapa.getAltoCuadro(), this);
            }
             */

            //pinta la anamiacion de colocar imagen en el tablero
            //El 0 es el X1 de la ciudad.
            if (banderaSeleccionado && xItemSeleccionado > 0 && xItemSeleccionado < mapa.getAnchoMapa() && yItemSeleccionado > 0 && yItemSeleccionado < mapa.getAltoMapa()) {
                g.drawImage(new ImageIcon(getClass().getResource(itemSeleccionado.getRutaImagen())).getImage(), xItemSeleccionado, yItemSeleccionado, 100, 100, this);
                int i = yItemSeleccionado / mapa.getAltoCuadro();
                int j = xItemSeleccionado / mapa.getAnchoCuadro();
                g.drawRect(j * mapa.getAnchoCuadro(), i * mapa.getAltoCuadro(), mapa.getAnchoCuadro(), mapa.getAltoCuadro());
            }

        }
    }

    private void pintarItems(Graphics g) {
        for (int i = 0; i < areaItems.getItems().size(); i++) {
            g.drawImage(new ImageIcon(getClass().getResource(areaItems.getItems().get(i).getRutaImagen())).getImage(), areaItems.getItems().get(i).getArea().x, areaItems.getItems().get(i).getArea().y, areaItems.getItems().get(i).getArea().width, areaItems.getItems().get(i).getArea().height, this);
        }
    }

    /**
     * Permite en recorrer la matriz de componentes y pintar las difrentes
     * imagenes asociadas ala posicion de la matriz en caso de que sea null es
     * que no hay ningun componente entonces no se pinta nada
     *
     * @param g grafico del panel que sirve como lienzo
     */
    private void pintarMapa(Graphics g) {
        for (int i = 0; i < mapa.getN(); i++) {
            for (int j = 0; j < mapa.getN(); j++) {
                if (mapa.getMapaM()[i][j] != null) {
                    g.drawImage(new ImageIcon(getClass().getResource(mapa.getMapaM()[i][j].getRutaImagen())).getImage(), mapa.getAnchoCuadro() * j, mapa.getAltoCuadro() * i, mapa.getAnchoCuadro(), mapa.getAltoCuadro(), this);
                    g.drawRect(mapa.getAnchoCuadro() * j, mapa.getAltoCuadro() * i, mapa.getAnchoCuadro(), mapa.getAltoCuadro());
                }
            }
        }
    }

    public Mapa getMapa() {
        return mapa;
    }

    public void setMapa(Mapa mapa) {
        this.mapa = mapa;
    }

    public void setAreaItems(AreaItems areaItems) {
        this.areaItems = areaItems;
    }

    public AreaItems getAreaItems() {
        return areaItems;
    }

    public Caja getCajaMovimiento() {
        return cajaMovimiento;
    }

    public void setCajaMovimiento(Caja cajaMovimiento) {
        this.cajaMovimiento = cajaMovimiento;
    }

    public Agente getAgenteMovimiento() {
        return agenteMovimiento;
    }

    public void setAgenteMovimiento(Agente agenteMovimiento) {
        this.agenteMovimiento = agenteMovimiento;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
