/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectointeligentes;


import jade.gui.GuiEvent;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author JORGE_ALEJANDRO
 */
public class MapaUI extends javax.swing.JFrame {

    private GraphicsDevice grafica;
    private Mapa mapa;
    private AreaItems areaItems;
    private AgenteEJADE agenteEJADE;

    /**
     * Creates new form Menu
     *
     * @param agenteEJADE
     */
    public MapaUI(AgenteEJADE agenteEJADE) {
        initComponents();
        this.agenteEJADE = agenteEJADE;
        grafica = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        grafica.setFullScreenWindow(this);
        panel1.setFocusable(true);
        String opcion = JOptionPane.showInputDialog(this, "1. Crear\n2. Cargar", "Mapa", JOptionPane.INFORMATION_MESSAGE);
        if (opcion.equals("1")) {
            int tamaño = Integer.parseInt(JOptionPane.showInputDialog(this, "Tamaño del mapa", "Cargar Mapa", JOptionPane.INFORMATION_MESSAGE));
            crearMapa(tamaño);
        } else {
            String archivo = JOptionPane.showInputDialog(this, "Nombre del archivo", "Mapa", JOptionPane.INFORMATION_MESSAGE);
            Util util = new Util();
            mapa = util.cargarMapa(this.getWidth(), this.getHeight(), archivo);
        }
        panel1.setMapa(mapa);
        graficarAreaItems();
        setResizable(false);
        setVisible(true);
    }

    private void graficarAreaItems() {
        int anchoAreaItemsX1 = mapa.getN() * mapa.getAnchoCuadro();
        int anchoAreaItemsX2 = this.getWidth() - (int) (this.getWidth() * 0.05);
        areaItems = new AreaItems(anchoAreaItemsX1, anchoAreaItemsX2);
        areaItems.cargarItems();
        panel1.setAreaItems(areaItems);
    }

    private void crearMapa(int tamaño) {
        //Obtengo el ancho para el cuadro de acuerdo al numero de columnas de la matriz del mapa.
        int anchoCuadro = (int) ((this.getWidth() * 0.8) / tamaño);
        //obtengo el alto para el cuadro de acuerdo al numero de filas de la matriz mapa.
        int altoCuadro = (int) ((this.getHeight() - 100) / tamaño);
        //El ancho del mapa es el numero de columnas por el ancho de un cuadro.
        int anchoMapa = tamaño * anchoCuadro;
        //El alto de la ciudad es el numero de filas por el alto del campo.
        int altoMapa = altoCuadro * tamaño;
        Cuadro mapaM[][] = new Cuadro[tamaño][tamaño];
        for (int i = 0; i < tamaño; i++) {
            for (int j = 0; j < tamaño; j++) {
                mapaM[i][j] = new Cuadro(i, j);
                Rectangle area = new Rectangle(anchoCuadro * j, altoCuadro * i, anchoMapa, altoMapa);
                mapaM[i][j].setArea(area);
            }
        }
        mapa = new Mapa(mapaM, tamaño, anchoCuadro, altoCuadro, anchoMapa, altoMapa);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new proyectointeligentes.Panel();
        guardarCiudadBoton = new javax.swing.JButton();
        ejecutarJuego = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        guardarCiudadBoton.setText("Guardar Ciudad");
        guardarCiudadBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCiudadBotonActionPerformed(evt);
            }
        });

        ejecutarJuego.setText("Ejecutar");
        ejecutarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarJuegoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guardarCiudadBoton)
                .addGap(18, 18, 18)
                .addComponent(ejecutarJuego)
                .addContainerGap(692, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(566, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarCiudadBoton)
                    .addComponent(ejecutarJuego))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarCiudadBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCiudadBotonActionPerformed
        String archivo = JOptionPane.showInputDialog(this, "Ingrese el nombre del mapa", "Guardar Ciudad", JOptionPane.INFORMATION_MESSAGE);
        Util util = new Util();
        util.GuardarMapa(mapa, archivo);
        JOptionPane.showMessageDialog(this, "Guardado con exito el mapa", "Exito al guardar mapa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_guardarCiudadBotonActionPerformed

    private void ejecutarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarJuegoActionPerformed
        mapa.EncontrarACM(panel1);
        GuiEvent ge = new GuiEvent(agenteEJADE, 1);
        agenteEJADE.postGuiEvent(ge);
//        ejecutarJuego();
    }//GEN-LAST:event_ejecutarJuegoActionPerformed


    public void ejecutarJuego() {
        mapa.EncontrarACM(panel1);
        LinkedList<Agente> agentes = new LinkedList<>();
        for (int x = 0; x < mapa.getAgentes().size(); x++) {
            Agente agente = mapa.getAgentes().get(x);
            AEstrellaCM aEstrellaCM = new AEstrellaCM(); //Hago objeto de algoritmo estrella, que mira las acomodaciones para el agente
            AEstrellaAM aEstrellaAM = new AEstrellaAM();
            Nodo nodoCaja = new Nodo(mapa.getCajas().get(x));
            Nodo nodoMarcador = new Nodo(mapa.getMarcadores().get(x));
            Nodo nodoAgente = new Nodo(mapa.getAgentes().get(x));
            LinkedList<Nodo> caminoCajaMarcador = aEstrellaCM.ejecutar(nodoCaja, nodoMarcador, mapa); //Obtengo ese camino
            Nodo cuadrar = caminoCajaMarcador.getFirst(); //Como hay que cambiar el nodo fin del agente a la caja entonces tomo el primer nodo camino de la caja
            Caja caja = (Caja) mapa.getCajas().get(x); //Tomo la caja seleccion
            Nodo finAgente = aEstrellaAM.actualizarFinAgente(cuadrar, caja, mapa); //Nodo para cambiar el nodo fin al agente
            LinkedList<Nodo> caminoAgenteCaja = aEstrellaAM.ejecutar(nodoAgente, finAgente, mapa); //Obtengo el camino del agente
            caminoAgenteCaja.add(new Nodo(caja));
            agente.setCamino(caminoAgenteCaja); //Seteo el primer camino al agente
            Nodo auxNodoInicio = caminoAgenteCaja.getLast();
            LinkedList<Nodo> caminoNuevo = new LinkedList<>();
            Mapa auxMapa = mapa.clonarMapa();
            Agente auxAgente = (Agente) agente.clone();
            Caja auxCaja = (Caja) caja.clone();
            for (int i = 0; i < caminoCajaMarcador.size() - 1; i++) {
                auxMapa.getMapaM()[caminoCajaMarcador.get(i).getI()][caminoCajaMarcador.get(i).getJ()] = auxCaja;
                auxMapa.getMapaM()[auxCaja.getI()][auxCaja.getJ()] = new Cuadro(auxCaja.getI(), auxCaja.getJ());
                auxCaja.setI(caminoCajaMarcador.get(i).getI());
                auxCaja.setJ(caminoCajaMarcador.get(i).getJ());
                Nodo nodoOpuesto = aEstrellaAM.nodoOpuesto(caminoCajaMarcador.get(i), caminoCajaMarcador.get(i + 1), auxMapa);
                if (aEstrellaAM.diagonal(auxNodoInicio, nodoOpuesto)) {
                    LinkedList<Nodo> auxCamino = aEstrellaAM.ejecutar(new Nodo(auxMapa.getMapaM()[auxNodoInicio.getI()][auxNodoInicio.getJ()]), new Nodo(auxMapa.getMapaM()[nodoOpuesto.getI()][nodoOpuesto.getJ()]), auxMapa);
                    caminoNuevo.addAll(auxCamino);
                    caminoNuevo.add(caminoCajaMarcador.get(i));
                } else {
                    caminoNuevo.add(caminoCajaMarcador.get(i));
                }
                auxNodoInicio = caminoNuevo.getLast();
                auxMapa.getMapaM()[auxNodoInicio.getI()][auxNodoInicio.getJ()] = auxAgente;
                auxMapa.getMapaM()[auxAgente.getI()][auxAgente.getJ()] = new Cuadro(agente.getI(), agente.getJ());
                auxAgente.setI(auxNodoInicio.getI());
                auxAgente.setJ(auxNodoInicio.getJ());
            }
            agente.getCamino().addAll(caminoNuevo); //Luego el segundo camino
            agentes.add(agente);
        }
        for (int i = 0; i < agentes.size(); i++) {
            agentes.get(i).start();
        }
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MapaUI(null).setVisible(true);
//            }
//        });
//    }
    public Mapa getMapa() {
        return mapa;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ejecutarJuego;
    private javax.swing.JButton guardarCiudadBoton;
    private proyectointeligentes.Panel panel1;
    // End of variables declaration//GEN-END:variables

}
