/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectointeligentes;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author JORGE_ALEJANDRO
 */
public class MapaUI extends javax.swing.JFrame {

    GraphicsDevice grafica;
    Mapa mapa;
    AreaItems areaItems;
    ArrayList<AgenteJADE> agentesJADE;

    /**
     * Creates new form Menu
     *
     * @param tamaño del mapa
     * @param archivo nombre del archivo en donde esta cargado el mapa
     */
    public MapaUI(int tamaño, String archivo) {
        initComponents();
        grafica = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        grafica.setFullScreenWindow(this);
        panel1.setFocusable(true);
        if (archivo == null) {
            crearMapa(tamaño);
        } else {
            Util util = new Util();
            mapa = util.cargarMapa(this.getWidth(), this.getHeight(), archivo);
        }
        panel1.setMapa(mapa);
        graficarAreaItems();
        setResizable(false);
        setVisible(true);
    }

    private void graficarAreaItems() {
        int anchoAreaItemsX1 = mapa.getN() * mapa.getAnchoCuadro();
        int anchoAreaItemsX2 = this.getWidth() - (int) (this.getWidth() * 0.05);
        areaItems = new AreaItems(anchoAreaItemsX1, anchoAreaItemsX2);
        areaItems.cargarItems();
        panel1.setAreaItems(areaItems);
    }

    private void crearMapa(int tamaño) {
        //Obtengo el ancho para el cuadro de acuerdo al numero de columnas de la matriz del mapa.
        int anchoCuadro = (int) ((this.getWidth() * 0.8) / tamaño);
        //obtengo el alto para el cuadro de acuerdo al numero de filas de la matriz mapa.
        int altoCuadro = (int) ((this.getHeight() - 100) / tamaño);
        //El ancho del mapa es el numero de columnas por el ancho de un cuadro.
        int anchoMapa = tamaño * anchoCuadro;
        //El alto de la ciudad es el numero de filas por el alto del campo.
        int altoMapa = altoCuadro * tamaño;
        Cuadro mapaM[][] = new Cuadro[tamaño][tamaño];
        for (int i = 0; i < tamaño; i++) {
            for (int j = 0; j < tamaño; j++) {
                mapaM[i][j] = new Cuadro(i, j);
                Rectangle area = new Rectangle(anchoCuadro * j, altoCuadro * i, anchoMapa, altoMapa);
                mapaM[i][j].setArea(area);
            }
        }
        mapa = new Mapa(mapaM, tamaño, anchoCuadro, altoCuadro, anchoMapa, altoMapa);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new proyectointeligentes.Panel();
        guardarCiudadBoton = new javax.swing.JButton();
        ejecutarJuego = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        guardarCiudadBoton.setText("Guardar Ciudad");
        guardarCiudadBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCiudadBotonActionPerformed(evt);
            }
        });

        ejecutarJuego.setText("Ejecutar");
        ejecutarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarJuegoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guardarCiudadBoton)
                .addGap(18, 18, 18)
                .addComponent(ejecutarJuego)
                .addContainerGap(692, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(566, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarCiudadBoton)
                    .addComponent(ejecutarJuego))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarCiudadBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCiudadBotonActionPerformed
        String archivo = JOptionPane.showInputDialog(this, "Ingrese el nombre del mapa", "Guardar Ciudad", JOptionPane.INFORMATION_MESSAGE);
        Util util = new Util();
        util.GuardarMapa(mapa, archivo);
        JOptionPane.showMessageDialog(this, "Guardado con exito el mapa", "Exito al guardar mapa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_guardarCiudadBotonActionPerformed

    private void ejecutarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarJuegoActionPerformed
        mapa.EncontrarItems();
        AEstrella aEstrella = new AEstrella(); //Hago objeto de algoritmo estrella
        AEstrella1 aEstrella1 = new AEstrella1();
//        aEstrella1.cargarInicioFinAgenteCaja(mapa); //Cargo los nodos posiciones del agente y la caja
        // int inicioI = ; //Obtengo las posiciones del nodo inicio que es el agente 
        // int inicioJ = aEstrella1.getInicio().getJ();
        Agente agente = (Agente) mapa.getAgentes().getFirst().clone();

        Rectangle area = mapa.getMapaM()[agente.getI()][agente.getJ()].getArea();
        mapa.getMapaM()[agente.getI()][agente.getJ()] = new Cuadro(agente.getI(), agente.getJ()); //Hago un cuadro blanco en esa posicion
        mapa.getMapaM()[agente.getI()][agente.getJ()].setArea(area);
        panel1.setAgenteMovimiento(agente); //Seteo el agente en el panel
        agente.setMapa(mapa); //seteo el mapa en el agente
        agente.setPanel(panel1); //Seteo el panel en el agente

        //HASTA AQUI EL AGENTE HAY QUE MODIFICARLE EL CAMINO
        Nodo nodeCaja = new Nodo(mapa.getCajas().getFirst());
        Nodo nodeMarcador = new Nodo(mapa.getMarcadores().getFirst());
        Nodo nodeAgente = new Nodo(mapa.getAgentes().getFirst());
        //aEstrella2.cargarInicioFinCajaMarcador(mapa, aEstrella1.getFin()); //Cargo desde los nodos inicio y fin caja y marcador
        LinkedList<Nodo> caminoCajaMarcador = aEstrella.ejecutar(nodeCaja, nodeMarcador, mapa); //Obtengo ese camino
        Nodo cuadrar = caminoCajaMarcador.getFirst(); //Como hay que cambiar el nodo fin del agente a la caja entonces tomo el primer nodo camino de la caja
        //inicioI=aEstrella2.getInicio().getI();
        //inicioJ=aEstrella2.getInicio().getJ();
        Caja caja = (Caja) mapa.getCajas().getFirst().clone(); //Tomo la caja seleccion
        Nodo finAgente = null; //Nodo para cambiar el nodo fin al agente
        if (caja.getI() + 1 == cuadrar.getI() && caja.getJ() == cuadrar.getJ()) { //Verificaciones para saber cual es el nodo fin para acomodar el agente
            finAgente = new Nodo(mapa.getMapaM()[caja.getI() - 1][caja.getJ()]);
        } else if (caja.getI() - 1 == cuadrar.getI() && caja.getJ() == cuadrar.getJ()) {
            finAgente = new Nodo(mapa.getMapaM()[caja.getI() + 1][caja.getJ()]);
        } else if (caja.getJ() + 1 == cuadrar.getJ() && caja.getI() == cuadrar.getI()) {
            finAgente = new Nodo(mapa.getMapaM()[caja.getI()][caja.getJ() - 1]);
        } else {
            finAgente = new Nodo(mapa.getMapaM()[caja.getI()][caja.getJ() + 1]);
        }
        //aEstrella1.actualizarFin(finAgente); //Le actualizo el fin al primer algoritmo a estrella
        LinkedList<Nodo> caminoAgenteCaja = aEstrella1.ejecutar(nodeAgente, finAgente, mapa); //Obtengo el camino del agente
        caminoAgenteCaja.add(new Nodo(caja));
        agente.setCamino1(caminoAgenteCaja); //Seteo el primer camino al agente
        Nodo auxNodoInicio = caminoAgenteCaja.getLast();
        LinkedList<Nodo> caminoNuevo = new LinkedList<>();
        // caja.setArea(mapa.getCajas().getFirst().getArea());
        //   caminoNuevo.add(new  Nodo(caja));
        // caminoNuevo.getFirst().setArea(caja.getArea());
        Cuadro[][] auxMapaCuadro = new Cuadro[mapa.getN()][mapa.getN()];
        for (int i = 0; i < mapa.getN(); i++) {
            for (int j = 0; j < mapa.getN(); j++) {
                auxMapaCuadro[i][j] = (Cuadro) mapa.getMapaM()[i][j].clone();
            }
        }
        Mapa auxMapa = new Mapa(auxMapaCuadro, mapa.getN(), -1, -1, -1, -1);
        Agente auxAgente = (Agente) agente.clone();
        Caja auxCaja = (Caja) caja.clone();
        for (int i = 0; i < caminoCajaMarcador.size() - 1; i++) {
            auxMapa.getMapaM()[caminoCajaMarcador.get(i).getI()][caminoCajaMarcador.get(i).getJ()] = auxCaja;
            auxMapa.getMapaM()[auxCaja.getI()][auxCaja.getJ()] = new Cuadro(auxCaja.getI(), auxCaja.getJ());
            auxCaja.setI(caminoCajaMarcador.get(i).getI());
            auxCaja.setJ(caminoCajaMarcador.get(i).getJ());
            Nodo nodoOpuesto = nodoOpuesto(caminoCajaMarcador.get(i), caminoCajaMarcador.get(i + 1), auxMapa);
            if (diagonal(auxNodoInicio, nodoOpuesto)) {
                LinkedList<Nodo> auxCamino = aEstrella1.ejecutar(new Nodo(auxMapa.getMapaM()[auxNodoInicio.getI()][auxNodoInicio.getJ()]), new Nodo(auxMapa.getMapaM()[nodoOpuesto.getI()][nodoOpuesto.getJ()]), auxMapa);
                caminoNuevo.addAll(auxCamino);
                caminoNuevo.add(caminoCajaMarcador.get(i));
                //caminoNuevo.add(caminoCajaMarcador.get(i+1));
            } else {
                caminoNuevo.add(caminoCajaMarcador.get(i));
            }

            auxNodoInicio = caminoNuevo.getLast();
            auxMapa.getMapaM()[auxNodoInicio.getI()][auxNodoInicio.getJ()] = auxAgente;
            auxMapa.getMapaM()[auxAgente.getI()][auxAgente.getJ()] = new Cuadro(agente.getI(), agente.getJ());
            auxAgente.setI(auxNodoInicio.getI());
            auxAgente.setJ(auxNodoInicio.getJ());

        }
        agente.setCamino2(caminoNuevo); //Luego el segundo camino
//        agente.setCajaAsignada(caja); //La caja que debe mover
        panel1.setCajaMovimiento(caja); //Le doy la caja al panel para que lo pinte
        panel1.setAgenteMovimiento(agente); //le doy el agente al panel para que lo pinte

//        for (int i = 0; i < camino2.size(); i++) {
//            System.out.println(camino2.get(i).getI() + "-" + camino2.get(i).getJ());
//        }
        panel1.getAgenteMovimiento().start(); //Ejecuto el hilo


    }//GEN-LAST:event_ejecutarJuegoActionPerformed
    public Nodo nodoOpuesto(Nodo nodo1, Nodo nodo2, Mapa mapa) {
        Nodo nodo3 = null;
        if (nodo1.getI() - 1 >= 0 && nodo1.getI() + 1 == nodo2.getI() && nodo1.getJ() == nodo2.getJ()) { //Verificaciones para saber cual es el nodo fin para acomodar el agente
            nodo3 = new Nodo(mapa.getMapaM()[nodo1.getI() - 1][nodo1.getJ()]);
        } else if (nodo1.getI() + 1 < mapa.getN() && nodo1.getI() - 1 == nodo2.getI() && nodo1.getJ() == nodo2.getJ()) {
            nodo3 = new Nodo(mapa.getMapaM()[nodo1.getI() + 1][nodo1.getJ()]);
        } else if (nodo1.getJ() - 1 >= 0 && nodo1.getJ() + 1 == nodo2.getJ() && nodo1.getI() == nodo2.getI()) {
            nodo3 = new Nodo(mapa.getMapaM()[nodo1.getI()][nodo1.getJ() - 1]);
        } else if (nodo1.getJ() + 1 < mapa.getN() && nodo1.getJ() - 1 == nodo2.getJ() && nodo1.getI() == nodo2.getI()) {
            nodo3 = new Nodo(mapa.getMapaM()[nodo1.getI()][nodo1.getJ() + 1]);
        }
        return nodo3;
    }

    private boolean diagonal(Nodo nodo1, Nodo nodo2) {
        if ((nodo1.getI() + 1 == nodo2.getI() && nodo1.getJ() + 1 == nodo2.getJ())
                || (nodo1.getI() - 1 == nodo2.getI() && nodo1.getJ() - 1 == nodo2.getJ())
                || (nodo1.getI() + 1 == nodo2.getI() && nodo1.getJ() - 1 == nodo2.getJ())
                || (nodo1.getI() - 1 == nodo2.getI() && nodo1.getJ() + 1 == nodo2.getJ())) {

            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapaUI(0, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ejecutarJuego;
    private javax.swing.JButton guardarCiudadBoton;
    private proyectointeligentes.Panel panel1;
    // End of variables declaration//GEN-END:variables

}
